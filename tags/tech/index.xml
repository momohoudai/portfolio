<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tech on Gerald's Website</title><link>https://geraldwong.net/tags/tech/</link><description>Recent content in tech on Gerald's Website</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 21 Nov 2023 08:00:00 +0800</lastBuildDate><atom:link href="https://geraldwong.net/tags/tech/index.xml" rel="self" type="application/rss+xml"/><item><title>Thoughts on Persona 4 Golden</title><link>https://geraldwong.net/blog/20231114_p4g_thoughts/</link><pubDate>Tue, 21 Nov 2023 08:00:00 +0800</pubDate><guid>https://geraldwong.net/blog/20231114_p4g_thoughts/</guid><description>&lt;p>This post is just going to be some ramblings I have after completing Persona 4 Golden in 2023.
Let&amp;rsquo;s get the easy stuff out of the way first. The game has amazing music, UI, art style and theme.
The team has always been excellent in these aspects and are often brought up in case studies in my classes.
With that out of the way, here are my thoughts on my playthrough.&lt;/p></description></item><item><title>Reflections on using Javascript in 2023</title><link>https://geraldwong.net/blog/20231106_javascript_reflections_2023/</link><pubDate>Mon, 06 Nov 2023 08:00:00 +0800</pubDate><guid>https://geraldwong.net/blog/20231106_javascript_reflections_2023/</guid><description>&lt;p>Recently, I have been writing quite a bit of Javascript for a couple of side-projects.
I was a little inspired to attempt to write simple webapps without the use of any frameworks.
One of them is avaliable here: &lt;a href="https://momohoudai.github.io/fvf/">FvF&lt;/a>.
This post is just some personal reflections going back to use vanilla Javascript/CSS in 2023.&lt;/p></description></item><item><title>Primix Dev Postmorterm</title><link>https://geraldwong.net/blog/20230810_primix_dev_postmorterm/</link><pubDate>Tue, 29 Aug 2023 23:00:00 +0800</pubDate><guid>https://geraldwong.net/blog/20230810_primix_dev_postmorterm/</guid><description>&lt;p>Alright, the game is &lt;a href="https://momohoudai.itch.io/primix">out on itch.io&lt;/a> for free.
This is the 2nd game I have made using a rewrite of the engine I used in &lt;a href="https://momohoudai.itch.io/dots_and_circles">dots and circles&lt;/a>.&lt;/p></description></item><item><title>Point on triangle algorithms</title><link>https://geraldwong.net/blog/20230517_overlapping_triangles/</link><pubDate>Thu, 18 May 2023 11:16:00 +0800</pubDate><guid>https://geraldwong.net/blog/20230517_overlapping_triangles/</guid><description>&lt;p>A game I&amp;rsquo;m working on requires me to check if a point is overlapped by a triangle.
Being a dumb engineer who can&amp;rsquo;t come up wiith his own algorithm, google gave me 3 algorithms.
Here I&amp;rsquo;m just going to share the algorithms and their performances.&lt;/p></description></item><item><title>[C/C++] Flatten integer to 0/1</title><link>https://geraldwong.net/blog/20230505_cpp_boolean_flattening_trick/</link><pubDate>Fri, 05 May 2023 13:25:00 +0800</pubDate><guid>https://geraldwong.net/blog/20230505_cpp_boolean_flattening_trick/</guid><description>&lt;p>This is a quick trick to &amp;lsquo;flatten&amp;rsquo; an integer into a 1 or 0.
This is probably a trick that only works in C/C++ because of how the not (!) operator works with integers.
While it&amp;rsquo;s usefulness is dubious in C++, it might be useful in C.&lt;/p></description></item><item><title>Going from Markdown to Asciidoc</title><link>https://geraldwong.net/blog/20210422_going_from_md_to_adoc/</link><pubDate>Sat, 22 Apr 2023 14:44:00 +0800</pubDate><guid>https://geraldwong.net/blog/20210422_going_from_md_to_adoc/</guid><description>&lt;p>Here I&amp;rsquo;ll pin down my thought process of changing my work&amp;rsquo;s documentations from Markdown to Asciidoc.
I have been switching endlessly back and forth between them and it&amp;rsquo;s getting really annoying because I just want to do my work at some point.
Hopefully after writing this, I will never look back until maybe 5 years later.&lt;/p></description></item><item><title>[XLS] INDEX/MATCH tl;dr</title><link>https://geraldwong.net/blog/20230411_index_match_tldr/</link><pubDate>Mon, 10 Apr 2023 12:00:00 +0800</pubDate><guid>https://geraldwong.net/blog/20230411_index_match_tldr/</guid><description>&lt;p>I was playing with Excel recently and for the hundredth time got stumped by how to use the INDEX/MATCH combo.
For the hundredth time in the past years, I open the same damn website and the same damn explanation which took awhile because my brain actually needed to work to understand what&amp;rsquo;s going on.&lt;/p></description></item><item><title>My Raspberry PI Cookbook</title><link>https://geraldwong.net/blog/_rpi_cookbook/</link><pubDate>Sun, 12 Mar 2023 12:00:00 +0800</pubDate><guid>https://geraldwong.net/blog/_rpi_cookbook/</guid><description>&lt;p>I figured that I might as well save a Raspberry PI cookbook somewhere.&lt;/p></description></item><item><title>I tried ChatGPT</title><link>https://geraldwong.net/blog/20230210_chatgpt_thoughts/</link><pubDate>Fri, 10 Feb 2023 12:00:00 +0800</pubDate><guid>https://geraldwong.net/blog/20230210_chatgpt_thoughts/</guid><description>&lt;p>I have been spending an unhealthy amount of time for the past 3 weeks playing around with ChatGPT instead of doing my work.
Seeing it evolve (some might argue &amp;lsquo;devolve&amp;rsquo;) day by day with &amp;lsquo;better&amp;rsquo; filters was interesting.
It&amp;rsquo;s quite amazing to see the different things it &lt;em>was&lt;/em> capable of.&lt;/p></description></item><item><title>Dots and Circles Dev Postmorterm</title><link>https://geraldwong.net/blog/20211201_dots_and_circles_dev_postmorterm/</link><pubDate>Wed, 01 Dec 2021 23:00:00 +0800</pubDate><guid>https://geraldwong.net/blog/20211201_dots_and_circles_dev_postmorterm/</guid><description>&lt;p>Alright, the game is &lt;a href="https://momohoudai.itch.io/dots-and-circles">out on itch.io&lt;/a> for free! Now that some time has passed and a handful of people have played the game, I felt that there is no better time then to jot down my experiences developing this small arcade game, lest I forget (again).&lt;/p></description></item><item><title>Byte Alignment Notes</title><link>https://geraldwong.net/blog/20211118_bytes_alignment_notes/</link><pubDate>Thu, 18 Nov 2021 12:00:00 +0800</pubDate><guid>https://geraldwong.net/blog/20211118_bytes_alignment_notes/</guid><description>&lt;p>When dealing with raw memory directly, there might come the need to align your memory to the nearest of some power of 2.&lt;/p></description></item><item><title>Dirty C/C++</title><link>https://geraldwong.net/blog/dirty_c/</link><pubDate>Fri, 24 Sep 2021 12:00:00 +0800</pubDate><guid>https://geraldwong.net/blog/dirty_c/</guid><description>&lt;p>Here is a collection of cool snippets of C/C++ code. Updated regularly. Used to show superiority and implode the minds of my students. Also to use in my own code, of course, whenever viable.&lt;/p></description></item><item><title>Perspective Projection Matrix</title><link>https://geraldwong.net/blog/20210801_perspective_projection_matrix/</link><pubDate>Sun, 01 Aug 2021 12:00:00 +0800</pubDate><guid>https://geraldwong.net/blog/20210801_perspective_projection_matrix/</guid><description>&lt;p>I was searching around internet for a full derivation for the 3D Perspective Projection Matrix to apply to my handmade software renderer and I was surprised by how little information I could find about it. That prompted me to write this post, to document the derivation of the matrix, at least in my own eyes.&lt;/p></description></item><item><title>Circle to Finite Line Collision</title><link>https://geraldwong.net/blog/20210428_circle_line_collision/</link><pubDate>Sun, 04 Jul 2021 12:00:00 +0800</pubDate><guid>https://geraldwong.net/blog/20210428_circle_line_collision/</guid><description>&lt;p>Recently, I had to derive this particular collision detection algorithm for my bullet hell genre game. It&amp;rsquo;s an interesting algorithm that can be expanded to deal with the &amp;lsquo;moving circle vs static circle&amp;rsquo; and &amp;lsquo;moving circle vs moving circle&amp;rsquo; problems.&lt;/p></description></item><item><title>[C/C++] The 'Glue' Preprocessor Trick</title><link>https://geraldwong.net/blog/20210406_glue_c_preprocessor_trick/</link><pubDate>Tue, 06 Apr 2021 12:00:00 +0800</pubDate><guid>https://geraldwong.net/blog/20210406_glue_c_preprocessor_trick/</guid><description>&lt;p>Macro tricks are rare to find nowadays.
Sometimes, I would code and &lt;em>know&lt;/em> of a trick but had forgotten how to go about implementing it because they can look as arcane as Template Metaprogramming.
Hopefully, I can document some of my knowledge of these tricks in this blog.
Here, I will introduce what I call the &amp;lsquo;Glue&amp;rsquo; macro trick.&lt;/p></description></item><item><title>A small shortcoming of return-by-value</title><link>https://geraldwong.net/blog/20210324_shortcomings_of_return_by_value_c_style_constructors/</link><pubDate>Wed, 24 Mar 2021 12:00:00 +0800</pubDate><guid>https://geraldwong.net/blog/20210324_shortcomings_of_return_by_value_c_style_constructors/</guid><description>&lt;p>Recently, while coding on my personal C/C++ game engine project, I ran into a surprising shortcoming of functions that returns an object by value. This was when I was still trying to keep things consistant in my project and went for a functional-programming style.&lt;/p></description></item></channel></rss>