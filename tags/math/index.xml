<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Math on Gerald's Website</title><link>https://geraldwong.net/tags/math/</link><description>Recent content in Math on Gerald's Website</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 01 Aug 2021 12:00:00 +0800</lastBuildDate><atom:link href="https://geraldwong.net/tags/math/index.xml" rel="self" type="application/rss+xml"/><item><title>Perspective Projection Matrix</title><link>https://geraldwong.net/blog/20210801_perspective_projection_matrix/</link><pubDate>Sun, 01 Aug 2021 12:00:00 +0800</pubDate><guid>https://geraldwong.net/blog/20210801_perspective_projection_matrix/</guid><description>&lt;p>I was searching around internet for a full derivation for the 3D Perspective Projection Matrix to apply to my handmade software renderer and I was surprised by how little information I could find about it. That prompted me to write this post, to document the derivation of the matrix, at least in my own eyes.&lt;/p></description></item><item><title>Circle to Finite Line Collision</title><link>https://geraldwong.net/blog/20210428_circle_line_collision-copy/</link><pubDate>Sun, 04 Jul 2021 12:00:00 +0800</pubDate><guid>https://geraldwong.net/blog/20210428_circle_line_collision-copy/</guid><description>&lt;p>Recently, I had to derive this particular collision detection algorithm for my bullet hell genre game. It&amp;rsquo;s an interesting algorithm that can be expanded to deal with the &amp;lsquo;moving circle vs static circle&amp;rsquo; and &amp;lsquo;moving circle vs moving circle&amp;rsquo; problems.&lt;/p></description></item></channel></rss>